searchNodes=[{"doc":"Documentation for Identicon. This program would ingest a string and turn it into a 5x5 squares identicon. Mirrored on the center. It will not be randomly generated, as the string will be converted into the identicon. Introducing the same string, the same identicon should be generated. By doing so, there is no need to store the image, as the identicon can be generated every time on the fly.","ref":"Identicon.html","title":"Identicon","type":"module"},{"doc":"This function processes the 15 first values of the image and tranfoms them into 25, following the given requirements.To do so, first of all 'image' struct is accessed, in particular to the hex property, the list of 16 hex numbers.That list is divided into several lists of 3 elements, discarting the last value.mirror_row method is referenced to append the values to mirror every row.Flattening the list of lists, one single list with the 25 values will be returned.Enum.with_index gets every element in the list and returns a tuple with the element and its index.","ref":"Identicon.html#build_grid/1","title":"Identicon.build_grid/1","type":"function"},{"doc":"In order to draw the grid, some calculations have to be done to pinpoint the different squares.","ref":"Identicon.html#build_pixel_map/1","title":"Identicon.build_pixel_map/1","type":"function"},{"doc":"This function draws the identicon. It creates an empty image and then fills it according to the color and the location of the even squares.","ref":"Identicon.html#draw_image/1","title":"Identicon.draw_image/1","type":"function"},{"doc":"filter_odd_squares method filters the grid to return the even values.","ref":"Identicon.html#filter_odd_squares/1","title":"Identicon.filter_odd_squares/1","type":"function"},{"doc":"Hash_input function converts a given input into a MD5 hash, and then transforms that unique numbers into a string of 16 numbers, using the pipe operator. The string of numbers is returned as a struct.Exampleiex&gt;Identicon.hash_input(&quot;transistor&quot;) %Identicon.Image{hex: [170, 160, 215, 138, 244, 154, 47, 188, 47, 122, 216, 251, 177, 29, 225, 170]}","ref":"Identicon.html#hash_input/1","title":"Identicon.hash_input/1","type":"function"},{"doc":"Main method consists on a pipeline, which processes the original string input, and transforms it several times until the identicon is generated.1.- input will be set as the first argument on the pipeline.2.- hash_input method will be triggered, to transform the input string into a 16 numbers string.3.- pick_color uses the first 3 numbers of the string to set the color of the identicon, as RGB values.4.- build_grid transforms the 16 numbers list into a 5x5 matrix, mirroring values.5.- filter_odds_squares removes the odd squares of the grid.6.- Finally, it draws the identicon.7.- And save the image.","ref":"Identicon.html#main/1","title":"Identicon.main/1","type":"function"},{"doc":"This function appends two values to the list, to mirror the values as per needed for the identicon.","ref":"Identicon.html#mirror_row/1","title":"Identicon.mirror_row/1","type":"function"},{"doc":"This function gets the first thee values of the string, the RGB values.By pattern matching, the first 3 values of image are stored.The underscore on _tail avoid warning messages to be displayed due to the fact tail is not being used anywhere.color returns a tuple with RGB.Example# iex&gt;Identicon.pick_color(%Identicon.Image{hex: # [170, 160, 215, 138, 244, 154, 47, 188, 47, 122, 216, 251, 177, 29, 225, 170]}) # [170, 160, 215]","ref":"Identicon.html#pick_color/1","title":"Identicon.pick_color/1","type":"function"},{"doc":"This method stores the identicon generated.","ref":"Identicon.html#save_image/2","title":"Identicon.save_image/2","type":"function"},{"doc":"This module will hold our struct.","ref":"Identicon.Image.html","title":"Identicon.Image","type":"module"},{"doc":"Is stores a list of numbers as a struct with the following properties:hex (hexadecimal) -&gt; with default value nil.color -&gt; color of the identicon.grid -&gt; values and index of the grid.pixel_map -&gt; tuple with the top left and bottom right location of the squares to fill.","ref":"Identicon.Image.html#__struct__/0","title":"Identicon.Image.__struct__/0","type":"function"}]